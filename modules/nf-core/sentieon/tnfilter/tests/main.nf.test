nextflow_process {

    name "Test Process SENTIEON_TNFILTER"
    config "./nextflow.config"
    script "../main.nf"
    process "SENTIEON_TNFILTER"
   
    tag "modules"
    tag "modules_nfcore"
    tag "sentieon"
    tag "sentieon/tnfilter"
   
    
    
    test("test_sentieon_tnfilter_base") {
        
        when {
            params {
                module_args = {"${meta.id}.filtered"}
            }
            process {
                """
                input[0] = [
                    [id:'test'],// meta map
                    file(params.niche_test['tnfilter']['vcf'],checkIfExists:true),
                    file(params.niche_test['tnfilter']['tbi'],checkIfExists:true),
                    file(params.niche_test['tnfilter']['stats'],checkIfExists:true),
                    [],
                    [],
                    []
                    ]
                input[1] = [[id:'genome'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta',checkIfExists:true)
                    ]
                input[2] = [[id:'genome'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai',checkIfExists:true)
                    ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    
    
    test("test_sentieon_tnfilter_with_files") {
        
        when {
            params {
                module_args = {"${meta.id}.filtered"}
            }
            process {
                """
                input[0] = [
                    [id:'test'],// meta map
                    file(params.niche_test['tnfilter']['vcf'],checkIfExists:true),
                    file(params.niche_test['tnfilter']['tbi'],checkIfExists:true),
                    file(params.niche_test['tnfilter']['stats'],checkIfExists:true),
                    [file(params.niche_test['tnfilter']['contamination_data'],checkIfExists:true)],
                    [file(params.niche_test['tnfilter']['segments'],checkIfExists:true)],
                    [file(params.niche_test['tnfilter']['orientation_data'],checkIfExists:true)]
                    ]
                input[1] = [[id:'genome'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta',checkIfExists:true)
                    ]
                input[2] = [[id:'genome'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai',checkIfExists:true)
                    ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    
    
    test("test_sentieon_tnfilter_base_stubs") {
        
        when {
            params {
                module_args = {"${meta.id}.filtered"}
            }
            process {
                """
                input[0] = [
                    [id:'test'],// meta map
                    file(params.niche_test['tnfilter']['vcf'],checkIfExists:true),
                    file(params.niche_test['tnfilter']['tbi'],checkIfExists:true),
                    file(params.niche_test['tnfilter']['stats'],checkIfExists:true),
                    [],
                    [],
                    []
                    ]
                input[1] = [[id:'genome'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta',checkIfExists:true)
                    ]
                input[2] = [[id:'genome'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai',checkIfExists:true)
                    ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    
    
    test("test_sentieon_tnfilter_base -- stub") {
        options '-stub'
        when {
            params {
                module_args = {"${meta.id}.filtered"}
            }
            process {
                """
                input[0] = [
                    [id:'test'],// meta map
                    file(params.niche_test['tnfilter']['vcf'],checkIfExists:true),
                    file(params.niche_test['tnfilter']['tbi'],checkIfExists:true),
                    file(params.niche_test['tnfilter']['stats'],checkIfExists:true),
                    [],
                    [],
                    []
                    ]
                input[1] = [[id:'genome'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta',checkIfExists:true)
                    ]
                input[2] = [[id:'genome'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai',checkIfExists:true)
                    ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    
    
    test("test_sentieon_tnfilter_with_files -- stub") {
        options '-stub'
        when {
            params {
                module_args = {"${meta.id}.filtered"}
            }
            process {
                """
                input[0] = [
                    [id:'test'],// meta map
                    file(params.niche_test['tnfilter']['vcf'],checkIfExists:true),
                    file(params.niche_test['tnfilter']['tbi'],checkIfExists:true),
                    file(params.niche_test['tnfilter']['stats'],checkIfExists:true),
                    [file(params.niche_test['tnfilter']['contamination_data'],checkIfExists:true)],
                    [file(params.niche_test['tnfilter']['segments'],checkIfExists:true)],
                    [file(params.niche_test['tnfilter']['orientation_data'],checkIfExists:true)]
                    ]
                input[1] = [[id:'genome'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta',checkIfExists:true)
                    ]
                input[2] = [[id:'genome'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai',checkIfExists:true)
                    ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    
    
    test("test_sentieon_tnfilter_base_stubs -- stub") {
        options '-stub'
        when {
            params {
                module_args = {"${meta.id}.filtered"}
            }
            process {
                """
                input[0] = [
                    [id:'test'],// meta map
                    file(params.niche_test['tnfilter']['vcf'],checkIfExists:true),
                    file(params.niche_test['tnfilter']['tbi'],checkIfExists:true),
                    file(params.niche_test['tnfilter']['stats'],checkIfExists:true),
                    [],
                    [],
                    []
                    ]
                input[1] = [[id:'genome'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta',checkIfExists:true)
                    ]
                input[2] = [[id:'genome'],// meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai',checkIfExists:true)
                    ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}