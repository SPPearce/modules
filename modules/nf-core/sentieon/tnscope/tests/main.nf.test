nextflow_process {

    name "Test Process SENTIEON_TNSCOPE"
    config "./nextflow.config"
    script "../main.nf"
    process "SENTIEON_TNSCOPE"

    tag "modules"
    tag "modules_nfcore"
    tag "picard"
    tag "picard/addorreplacereadgroups"
    tag "sentieon"
    tag "sentieon/tnscope"

    setup {
        run("PICARD_ADDORREPLACEREADGROUPS", alias: "NORMAL_ADDORREPLACEREADGROUPS") {
            script "../../../picard/addorreplacereadgroups/main.nf"
            config './nextflow.config'
            process {
                """
                input[0] = [[id:'test'],// meta map
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.recalibrated.sorted.bam',checkIfExists:true)]
                    ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                """
            }
        }

        run("PICARD_ADDORREPLACEREADGROUPS", alias: "TUMOUR_ADDORREPLACEREADGROUPS") {
            script "../../../picard/addorreplacereadgroups/main.nf"
            config './nextflow.config'

            process {
                """
                input[0] = [[id:'test'],// meta map
                    [file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.recalibrated.sorted.bam',checkIfExists:true)]
                    ]
                input[1] = [[],[]]
                input[2] = [[],[]]
                """
            }
        }
    }

    test("test_tnscope") {

        when {
            process {
                """
                input[0] = NORMAL_ADDORREPLACEREADGROUPS.out.bam
                    .join( NORMAL_ADDORREPLACEREADGROUPS.out.bai)
                    .join( TUMOUR_ADDORREPLACEREADGROUPS.out.bam)
                    .join( TUMOUR_ADDORREPLACEREADGROUPS.out.bai)
                    .map{
                    meta,normal_bam,normal_bai,tumour_bam,tumour_bai->
                    [[id:'test'],[normal_bam,tumour_bam],[normal_bai,tumour_bai],[]]
                    }
                input[1] = [ [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists:true)
                    ]
                input[2] = [ [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists:true)
                    ]
                input[3] = [[:],[],[]]
                input[4] = [[:],[],[]]
                input[5] = [[:],[],[]]
                input[6] = [[:],[]]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test_tnscope -- stub") {
        options '-stub'
        when {
            process {
                """
                input[0] = NORMAL_ADDORREPLACEREADGROUPS.out.bam
                    .join( NORMAL_ADDORREPLACEREADGROUPS.out.bai)
                    .join( TUMOUR_ADDORREPLACEREADGROUPS.out.bam)
                    .join( TUMOUR_ADDORREPLACEREADGROUPS.out.bai)
                    .map{
                    meta,normal_bam,normal_bai,tumour_bam,tumour_bai->
                    [[id:'test'],[normal_bam,tumour_bam],[normal_bai,tumour_bai],[]]
                    }
                input[1] = [ [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists:true)
                    ]
                input[2] = [ [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists:true)
                    ]
                input[3] = [[:],[],[]]
                input[4] = [[:],[],[]]
                input[5] = [[:],[],[]]
                input[6] = [[:],[]]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}