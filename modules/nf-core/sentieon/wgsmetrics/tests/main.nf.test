nextflow_process {

    name "Test Process SENTIEON_WGSMETRICS"
    config "./nextflow.config"
    script "../main.nf"
    process "SENTIEON_WGSMETRICS"
   
    tag "modules"
    tag "modules_nfcore"
    tag "sentieon"
    tag "sentieon/wgsmetrics"
   
    
    
    test("test_sentieon_wgsmetrics") {
        
        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = [
                    [id:'test',single_end:false],// meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam',checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai',checkIfExists:true)
                    ]
                input[1] = [
                    [id:'genome'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta',checkIfExists:true)
                    ]
                input[2] = [
                    [id:'genome'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai',checkIfExists:true)
                    ]
                input[3] = [[:],[]]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
    
    
    test("test_sentieon_wgsmetrics -- stub") {
        options '-stub'
        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = [
                    [id:'test',single_end:false],// meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam',checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai',checkIfExists:true)
                    ]
                input[1] = [
                    [id:'genome'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta',checkIfExists:true)
                    ]
                input[2] = [
                    [id:'genome'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai',checkIfExists:true)
                    ]
                input[3] = [[:],[]]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}